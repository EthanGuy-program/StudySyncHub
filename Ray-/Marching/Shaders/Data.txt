        #version 300 es
        precision highp float;
        
        uniform vec2 u_resolution;
        uniform float u_time;
        uniform vec3 u_cameraPosition;
        uniform mat3 u_cameraOrientation;
        uniform vec3 u_lightPosition;
        uniform vec3 u_emissionColor;
        
        // sea parameters
        const float SEA_HEIGHT = 0.6;
        const float SEA_CHOPPY = 4.0;
        const float SEA_SPEED = 0.8;
        const float SEA_FREQ = 0.16;
        const vec3 SEA_BASE = vec3(0.0, 0.09, 0.18);
        const vec3 SEA_WATER_COLOR = vec3(0.8, 0.9, 0.6) * 0.6;
        #define SEA_TIME (1.0 + u_time * SEA_SPEED)
        const mat2 octave_m = mat2(1.6, 1.2, -1.2, 1.6);
        
        // math functions
        mat3 fromEuler(vec3 ang) {
            vec2 a1 = vec2(sin(ang.x), cos(ang.x));
            vec2 a2 = vec2(sin(ang.y), cos(ang.y));
            vec2 a3 = vec2(sin(ang.z), cos(ang.z));
            mat3 m;
            m[0] = vec3(a1.y * a3.y + a1.x * a2.x * a3.x, a1.y * a2.x * a3.x + a3.y * a1.x, -a2.y * a3.x);
            m[1] = vec3(-a2.y * a1.x, a1.y * a2.y, a2.x);
            m[2] = vec3(a3.y * a1.x * a2.x + a1.y * a3.x, a1.x * a3.x - a1.y * a3.y * a2.x, a2.y * a3.y);
            return m;
        }
        
        float hash(vec2 p) {
            float h = dot(p, vec2(127.1, 311.7));
            return fract(sin(h) * 43758.5453123);
        }
        
        float noise(vec2 p) {
            vec2 i = floor(p);
            vec2 f = fract(p);
            vec2 u = f * f * (3.0 - 2.0 * f);
            return -1.0 + 2.0 * mix(mix(hash(i + vec2(0.0, 0.0)), hash(i + vec2(1.0, 0.0)), u.x),
                                      mix(hash(i + vec2(0.0, 1.0)), hash(i + vec2(1.0, 1.0)), u.x), u.y);
        }
        
        // lighting functions
        float diffuse(vec3 n, vec3 l, float p) {
            return pow(dot(n, l) * 0.4 + 0.6, p);
        }
        
        float specular(vec3 n, vec3 l, vec3 e, float s) {
            float nrm = (s + 8.0) / (3.14159 * 8.0);
            return pow(max(dot(reflect(e, n), l), 0.0), s) * nrm;
        }
        
        // sky color function
        vec3 getSkyColor(vec3 e) {
            e.y = (max(e.y, 0.0) * 0.8 + 0.2) * 0.8;
            return vec3(pow(1.0 - e.y, 2.0), 1.0 - e.y, 0.6 + (1.0 - e.y) * 0.4) * 1.1;
        }
        
        // sea functions
        float sea_octave(vec2 uv, float choppy) {
            uv += noise(uv);
            vec2 wv = 1.0 - abs(sin(uv));
            vec2 swv = abs(cos(uv));
            wv = mix(wv, swv, wv);
            return pow(1.0 - pow(wv.x * wv.y, 0.65), choppy);
        }
        
        float map(vec3 p) {
            float freq = SEA_FREQ;
            float amp = SEA_HEIGHT;
            float choppy = SEA_CHOPPY;
            vec2 uv = p.xz * vec2(1.0, 1.0); // Infinite repeat
            uv.x *= 0.75;
        
            float d, h = 0.0;
            for (int i = 0; i < 3; i++) {
                d = sea_octave((uv + SEA_TIME) * freq, choppy);
                d += sea_octave((uv - SEA_TIME) * freq, choppy);
                h += d * amp;
                uv *= octave_m;
                freq *= 1.9;
                amp *= 0.22;
                choppy = mix(choppy, 1.0, 0.2);
            }
            return p.y - h;
        }
        
        float map_detailed(vec3 p) {
            float freq = SEA_FREQ;
            float amp = SEA_HEIGHT;
            float choppy = SEA_CHOPPY;
            vec2 uv = p.xz * vec2(1.0, 1.0); // Infinite repeat
            uv.x *= 0.75;
        
            float d, h = 0.0;
            for (int i = 0; i < 5; i++) {
                d = sea_octave((uv + SEA_TIME) * freq, choppy);
                d += sea_octave((uv - SEA_TIME) * freq, choppy);
                h += d * amp;
                uv *= octave_m;
                freq *= 1.9;
                amp *= 0.22;
                choppy = mix(choppy, 1.0, 0.2);
            }
            return p.y - h;
        }
        
        vec3 getSeaColor(vec3 p, vec3 n, vec3 l, vec3 eye, vec3 dist) {
            float fresnel = clamp(1.0 - dot(n, -eye), 0.0, 1.0);
            fresnel = min(pow(fresnel, 3.0), 0.5);
        
            vec3 reflected = getSkyColor(reflect(eye, n));
            vec3 refracted = SEA_BASE + diffuse(n, l, 80.0) * SEA_WATER_COLOR * 0.12;
        
            vec3 color = mix(refracted, reflected, fresnel);
        
            float atten = max(1.0 - dot(dist, dist) * 0.001, 0.0);
            color += SEA_WATER_COLOR * (p.y - SEA_HEIGHT) * 0.18 * atten;
        
            color += vec3(specular(n, l, eye, 60.0));
        
            return color;
        }
        
        // ray tracing functions
        vec3 getNormal(vec3 p, float eps) {
            vec3 n;
            n.y = map_detailed(p);
            n.x = map_detailed(vec3(p.x + eps, p.y, p.z)) - n.y;
            n.z = map_detailed(vec3(p.x, p.y, p.z + eps)) - n.y;
            n.y = eps;
            return normalize(n);
        }
        
        float heightMapTracing(vec3 ori, vec3 dir, out vec3 p) {
            float tm = 0.0;
            float tx = 1000.0;
            float hx = map(ori + dir * tx);
            if (hx > 0.0) {
                p = ori + dir * tx;
                return tx;
            }
            float hm = map(ori + dir * tm);
            float tmid = 0.0;
            for (int i = 0; i < 8; i++) {
                tmid = mix(tm, tx, hm / (hm - hx));
                p = ori + dir * tmid;
                float hmid = map(p);
                if (hmid < 0.0) {
                    tx = tmid;
                    hx = hmid;
                } else {
                    tm = tmid;
                    hm = hmid;
                }
            }
            return tmid;
        }
        
        vec3 getPixel(in vec2 coord, float time) {
            vec2 uv = coord / u_resolution.xy;
            uv = uv * 2.0 - 1.0;
            uv.x *= u_resolution.x / u_resolution.y;
        
            // ray
            vec3 dir = normalize(vec3(uv.xy, -2.0));
            vec3 ori = u_cameraPosition;
            vec3 rayDir = normalize(u_cameraOrientation * dir);
        
            // tracing
            vec3 p;
            heightMapTracing(ori, rayDir, p);
            vec3 dist = p - ori;
            vec3 n = getNormal(p, dot(dist, dist) * 0.001);
            vec3 light = normalize(u_lightPosition - p);
            vec3 eye = normalize(-rayDir);
        
            // color
            vec3 col = getSeaColor(p, n, light, eye, dist);
        
            // return color
            return col;
        }
        
        out vec4 fragColor;
        void mainImage(out vec4 fragColor, in vec2 fragCoord) {
            vec3 col = getPixel(fragCoord.xy, u_time);
            fragColor = vec4(col, 1.0);
        }
        
        void main() {
            mainImage(fragColor, gl_FragCoord.xy);
        }
             
			 
			 
			 
			 
			 
			 
			 
			 
!#


#version 300 es
        precision highp float;
        
        uniform vec2 u_resolution;
        uniform float u_time;
        uniform vec3 u_cameraPosition;
        uniform mat3 u_cameraOrientation;
        uniform vec3 u_lightPosition; // Light position
        uniform vec3 u_emissionColor; // Self-illumination color
        
        out vec4 fragColor;
        
        // Signed Distance Function for box
        float boxSDF(vec3 p, vec3 b) {
            vec3 d = abs(p) - b;
            return length(max(d, 0.0)) + min(max(d.x, max(d.y, d.z)), 0.0);
        }
        
        // Map function to repeat the box in the x and z directions
        float map(vec3 p) {
            vec3 q = vec3(mod(p.x, 2.0) - 1.0, p.y, mod(p.z, 2.0) - 1.0);
            return boxSDF(q, vec3(0.5, 0.5, 0.5)); // Box size
        }
        
        // Calculate normal using central difference
        vec3 getNormal(vec3 p) {
            const float eps = 0.001;
            vec2 e = vec2(1.0, -1.0) * eps;
            return normalize(e.xyy * map(p + e.xyy) +
                             e.yyx * map(p + e.yyx) +
                             e.yxy * map(p + e.yxy) +
                             e.xxx * map(p + e.xxx));
        }
        
        // Shadow calculation
        float shadow(vec3 p, vec3 lightDir) {
            float shadow = 1.0;
            const float shadowBias = 0.001;
            vec3 shadowRay = p + lightDir * shadowBias;
            float dist = map(shadowRay);
            return dist < length(lightDir) ? 0.0 : shadow;
        }
        
        // Raymarching algorithm
        vec3 raymarch(vec3 ro, vec3 rd) {
            float totalDist = 0.0;
            const int maxSteps = 100;
            const float maxDist = 100.0;
            const float surfaceDist = 0.001;
        
            for (int i = 0; i < maxSteps; i++) {
                vec3 p = ro + totalDist * rd;
                float dist = map(p);
                totalDist += dist;
                if (dist < surfaceDist || totalDist > maxDist) break;
            }
        
            vec3 p = ro + totalDist * rd;
            vec3 normal = getNormal(p);
            vec3 lightDir = normalize(u_lightPosition - p);
            vec3 viewDir = normalize(u_cameraPosition - p);
        
            float diffuse = max(dot(normal, lightDir), 0.0);
            float shadowFactor = shadow(p, lightDir);
        
            // Self-illumination and diffuse shading
            vec3 color = (1.0 - shadowFactor) * (diffuse * vec3(1.0) + u_emissionColor);
        
            return color;
        }
        
        void main() {
            vec2 uv = (gl_FragCoord.xy / u_resolution) * 2.0 - 1.0;
            vec3 ro = u_cameraPosition;
            vec3 rd = normalize(u_cameraOrientation * vec3(uv, 1.0));
        
            vec3 color = raymarch(ro, rd);
        
            // Apply time-based effects
            color *= (u_time / max(u_time, 10.0));
        
            fragColor = vec4(color, 1.0);
        }   